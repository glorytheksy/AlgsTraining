package leetcode.algs.backtrack;

/**
 * 
 * 回溯法
 * 
 * 求解过程步骤类似dfs，关键在于构造解空间树，以及回溯（子节点回到父节点）时的现场恢复
 * 
 * 代码框架（if判断终止条件，再加上for循环里面套上递归）：
 * 
 * result = []
 * backtrack(路径，遍历列表)：
 *   if(路径终止):
 *     result.add(路径)
 *     return;
 *   for (遍历列表):
 *     更新路径，和遍历列表
 *     backtrack(新的路径，新的遍历列表)
 *     
 *     恢复为旧的路径，旧的遍历列表
 * 
 * 注：回溯类似于枚举，但是由于树状的遍历结构，可以提前忽略掉一些不可行解
 * 
 * 注意点：
 * 
 * (1) 有时候为了避免重复，可能需要先把元素排序一下，这样回溯到的答案可以保证唯一性
 *
 * 
 * (2) 回溯题目可以设置一些私有变量，不然backtrack方法的参数会很多(这点随便你)
 * 
 * 
 * (3) 各别排列组合子集题目可以不用回溯，而改用一些递归的方法，但是这些题目的后续题目上，上不如回溯 + 树形图分析那样具有普遍性，比如去重就是
 * 
 */
